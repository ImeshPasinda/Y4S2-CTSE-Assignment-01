name: cicd-workflow to create docker image and upload into AWS ECR

on:
  push:
    branches: [ "development" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Setup AWS ECR Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install dependencies for all services (optional)
      run: |
        for service in authenticate course content enrollment payment; do
          if [ -f services/$service/package.json ]; then
            echo "Installing dependencies for $service..."
            cd services/$service
            npm install
            cd -
          fi
        done

    - name: Build and Push Docker images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        LATEST_TAG: latest
        ECR_REPO_PREFIX: learnopia
      run: |
        for service in authenticate course content enrollment payment; do
          IMAGE_NAME="$ECR_REGISTRY/$ECR_REPO_PREFIX/$service:$LATEST_TAG"
          
          echo "Building and pushing $IMAGE_NAME"
          
          docker build -t $IMAGE_NAME services/$service
          docker push $IMAGE_NAME
        done 

    - name: Deploy to Amazon ECS
      env:
        CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        for service in authenticate course content enrollment payment; do
          echo "Updating ECS service for $service..."
          aws ecs update-service --cluster $CLUSTER_NAME --service ${service}-service --force-new-deployment
        done
